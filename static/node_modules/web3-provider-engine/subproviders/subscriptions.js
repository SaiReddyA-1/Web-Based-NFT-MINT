var _createClass = require("C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/createClass");

var _classCallCheck = require("C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/classCallCheck");

var _inherits = require("C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/inherits");

var _possibleConstructorReturn = require("C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/possibleConstructorReturn");

var _getPrototypeOf = require("C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/getPrototypeOf");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var ProviderSubprovider = require('./json-rpc-engine-middleware');

var createSubscriptionManager = require('eth-json-rpc-filters/subscriptionManager');

var SubscriptionsSubprovider = /*#__PURE__*/function (_ProviderSubprovider) {
  "use strict";

  _inherits(SubscriptionsSubprovider, _ProviderSubprovider);

  var _super = _createSuper(SubscriptionsSubprovider);

  function SubscriptionsSubprovider() {
    _classCallCheck(this, SubscriptionsSubprovider);

    return _super.call(this, function (_ref) {
      var blockTracker = _ref.blockTracker,
          provider = _ref.provider,
          engine = _ref.engine;

      var _createSubscriptionMa = createSubscriptionManager({
        blockTracker: blockTracker,
        provider: provider
      }),
          events = _createSubscriptionMa.events,
          middleware = _createSubscriptionMa.middleware; // forward subscription events on the engine


      events.on('notification', function (data) {
        return engine.emit('data', null, data);
      }); // return the subscription install/remove middleware

      return middleware;
    });
  }

  return _createClass(SubscriptionsSubprovider);
}(ProviderSubprovider);

module.exports = SubscriptionsSubprovider;