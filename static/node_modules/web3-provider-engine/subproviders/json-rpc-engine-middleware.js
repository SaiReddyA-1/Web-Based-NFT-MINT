var _classCallCheck = require("C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/classCallCheck");

var _createClass = require("C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/createClass");

var _inherits = require("C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/inherits");

var _possibleConstructorReturn = require("C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/possibleConstructorReturn");

var _getPrototypeOf = require("C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/getPrototypeOf");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Subprovider = require('./subprovider.js'); // wraps a json-rpc-engine middleware in a subprovider interface


var JsonRpcEngineMiddlewareSubprovider = /*#__PURE__*/function (_Subprovider) {
  "use strict";

  _inherits(JsonRpcEngineMiddlewareSubprovider, _Subprovider);

  var _super = _createSuper(JsonRpcEngineMiddlewareSubprovider);

  // take a constructorFn to call once we have a reference to the engine
  function JsonRpcEngineMiddlewareSubprovider(constructorFn) {
    var _this;

    _classCallCheck(this, JsonRpcEngineMiddlewareSubprovider);

    _this = _super.call(this);
    if (!constructorFn) throw new Error('JsonRpcEngineMiddlewareSubprovider - no constructorFn specified');
    _this._constructorFn = constructorFn;
    return _this;
  } // this is called once the subprovider has been added to the provider engine


  _createClass(JsonRpcEngineMiddlewareSubprovider, [{
    key: "setEngine",
    value: function setEngine(engine) {
      if (this.middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice');
      var blockTracker = engine._blockTracker;

      var middleware = this._constructorFn({
        engine: engine,
        provider: engine,
        blockTracker: blockTracker
      });

      if (!middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware');
      if (typeof middleware !== 'function') throw new Error('JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function');
      this.middleware = middleware;
    }
  }, {
    key: "handleRequest",
    value: function handleRequest(req, provEngNext, provEngEnd) {
      var res = {
        id: req.id
      };
      this.middleware(req, res, middlewareNext, middlewareEnd);

      function middlewareNext(handler) {
        provEngNext(function (err, result, cb) {
          // update response object with result or error
          if (err) {
            delete res.result;
            res.error = {
              message: err.message || err
            };
          } else {
            res.result = result;
          } // call middleware's next handler (even if error)


          if (handler) {
            handler(cb);
          } else {
            cb();
          }
        });
      }

      function middlewareEnd(err) {
        if (err) return provEngEnd(err);
        provEngEnd(null, res.result);
      }
    }
  }]);

  return JsonRpcEngineMiddlewareSubprovider;
}(Subprovider);

module.exports = JsonRpcEngineMiddlewareSubprovider;