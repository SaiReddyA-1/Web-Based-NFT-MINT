"use strict";

import _classCallCheck from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";
import _inherits from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { BigNumber } from "@ethersproject/bignumber";
import { MaxUint256, NegativeOne, One, Zero } from "@ethersproject/constants";
import { Coder } from "./abstract-coder";
export var NumberCoder = /*#__PURE__*/function (_Coder) {
  _inherits(NumberCoder, _Coder);

  var _super = _createSuper(NumberCoder);

  function NumberCoder(size, signed, localName) {
    var _this;

    _classCallCheck(this, NumberCoder);

    var name = (signed ? "int" : "uint") + size * 8;
    _this = _super.call(this, name, name, localName, false);
    _this.size = size;
    _this.signed = signed;
    return _this;
  }

  _createClass(NumberCoder, [{
    key: "encode",
    value: function encode(writer, value) {
      var v = BigNumber.from(value); // Check bounds are safe for encoding

      var maxUintValue = MaxUint256.mask(writer.wordSize * 8);

      if (this.signed) {
        var bounds = maxUintValue.mask(this.size * 8 - 1);

        if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {
          this._throwError("value out-of-bounds", value);
        }
      } else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {
        this._throwError("value out-of-bounds", value);
      }

      v = v.toTwos(this.size * 8).mask(this.size * 8);

      if (this.signed) {
        v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
      }

      return writer.writeValue(v);
    }
  }, {
    key: "decode",
    value: function decode(reader) {
      var value = reader.readValue().mask(this.size * 8);

      if (this.signed) {
        value = value.fromTwos(this.size * 8);
      }

      return reader.coerce(this.name, value);
    }
  }]);

  return NumberCoder;
}(Coder);