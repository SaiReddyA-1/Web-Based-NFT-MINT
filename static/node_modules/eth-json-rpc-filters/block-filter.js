var _regeneratorRuntime = require("C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/regenerator");

var _asyncToGenerator = require("C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/asyncToGenerator");

var _classCallCheck = require("C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/classCallCheck");

var _createClass = require("C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/createClass");

var _inherits = require("C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/inherits");

var _possibleConstructorReturn = require("C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/possibleConstructorReturn");

var _getPrototypeOf = require("C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/getPrototypeOf");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var BaseFilter = require('./base-filter');

var getBlocksForRange = require('./getBlocksForRange');

var _require = require('./hexUtils'),
    incrementHexInt = _require.incrementHexInt;

var BlockFilter = /*#__PURE__*/function (_BaseFilter) {
  "use strict";

  _inherits(BlockFilter, _BaseFilter);

  var _super = _createSuper(BlockFilter);

  function BlockFilter(_ref) {
    var _this;

    var provider = _ref.provider,
        params = _ref.params;

    _classCallCheck(this, BlockFilter);

    _this = _super.call(this);
    _this.type = 'block';
    _this.provider = provider;
    return _this;
  }

  _createClass(BlockFilter, [{
    key: "update",
    value: function () {
      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {
        var oldBlock, newBlock, toBlock, fromBlock, blockBodies, blockHashes;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                oldBlock = _ref2.oldBlock, newBlock = _ref2.newBlock;
                toBlock = newBlock;
                fromBlock = incrementHexInt(oldBlock);
                _context.next = 5;
                return getBlocksForRange({
                  provider: this.provider,
                  fromBlock: fromBlock,
                  toBlock: toBlock
                });

              case 5:
                blockBodies = _context.sent;
                blockHashes = blockBodies.map(function (block) {
                  return block.hash;
                });
                this.addResults(blockHashes);

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function update(_x) {
        return _update.apply(this, arguments);
      }

      return update;
    }()
  }]);

  return BlockFilter;
}(BaseFilter);

module.exports = BlockFilter;