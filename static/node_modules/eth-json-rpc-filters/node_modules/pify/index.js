'use strict';

var _defineProperty = require("C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/defineProperty");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var processFn = function processFn(fn, options, proxy, unwrapped) {
  return function () {
    var _this = this;

    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {
      arguments_[_key] = arguments[_key];
    }

    var P = options.promiseModule;
    return new P(function (resolve, reject) {
      if (options.multiArgs) {
        arguments_.push(function () {
          for (var _len2 = arguments.length, result = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            result[_key2] = arguments[_key2];
          }

          if (options.errorFirst) {
            if (result[0]) {
              reject(result);
            } else {
              result.shift();
              resolve(result);
            }
          } else {
            resolve(result);
          }
        });
      } else if (options.errorFirst) {
        arguments_.push(function (error, result) {
          if (error) {
            reject(error);
          } else {
            resolve(result);
          }
        });
      } else {
        arguments_.push(resolve);
      }

      var self = _this === proxy ? unwrapped : _this;
      Reflect.apply(fn, self, arguments_);
    });
  };
};

var filterCache = new WeakMap();

module.exports = function (input, options) {
  options = _objectSpread({
    exclude: [/.+(?:Sync|Stream)$/],
    errorFirst: true,
    promiseModule: Promise
  }, options);
  var objectType = typeof input;

  if (!(input !== null && (objectType === 'object' || objectType === 'function'))) {
    throw new TypeError("Expected `input` to be a `Function` or `Object`, got `".concat(input === null ? 'null' : objectType, "`"));
  }

  var filter = function filter(target, key) {
    var cached = filterCache.get(target);

    if (!cached) {
      cached = {};
      filterCache.set(target, cached);
    }

    if (key in cached) {
      return cached[key];
    }

    var match = function match(pattern) {
      return typeof pattern === 'string' || typeof key === 'symbol' ? key === pattern : pattern.test(key);
    };

    var desc = Reflect.getOwnPropertyDescriptor(target, key);
    var writableOrConfigurableOwn = desc === undefined || desc.writable || desc.configurable;
    var included = options.include ? options.include.some(match) : !options.exclude.some(match);
    var shouldFilter = included && writableOrConfigurableOwn;
    cached[key] = shouldFilter;
    return shouldFilter;
  };

  var cache = new WeakMap();
  var proxy = new Proxy(input, {
    apply: function apply(target, thisArg, args) {
      var cached = cache.get(target);

      if (cached) {
        return Reflect.apply(cached, thisArg, args);
      }

      var pified = options.excludeMain ? target : processFn(target, options, proxy, target);
      cache.set(target, pified);
      return Reflect.apply(pified, thisArg, args);
    },
    get: function get(target, key) {
      var property = target[key]; // eslint-disable-next-line no-use-extend-native/no-use-extend-native

      if (!filter(target, key) || property === Function.prototype[key]) {
        return property;
      }

      var cached = cache.get(property);

      if (cached) {
        return cached;
      }

      if (typeof property === 'function') {
        var pified = processFn(property, options, proxy, target);
        cache.set(property, pified);
        return pified;
      }

      return property;
    }
  });
  return proxy;
};