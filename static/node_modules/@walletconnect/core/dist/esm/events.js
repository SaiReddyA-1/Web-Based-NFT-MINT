import _classCallCheck from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";
import { isJsonRpcRequest, isJsonRpcResponseSuccess, isJsonRpcResponseError, isInternalEvent, isReservedEvent } from "@walletconnect/utils";

var EventManager = /*#__PURE__*/function () {
  function EventManager() {
    _classCallCheck(this, EventManager);

    this._eventEmitters = [];
  }

  _createClass(EventManager, [{
    key: "subscribe",
    value: function subscribe(eventEmitter) {
      this._eventEmitters.push(eventEmitter);
    }
  }, {
    key: "unsubscribe",
    value: function unsubscribe(event) {
      this._eventEmitters = this._eventEmitters.filter(function (x) {
        return x.event !== event;
      });
    }
  }, {
    key: "trigger",
    value: function trigger(payload) {
      var eventEmitters = [];
      var event;

      if (isJsonRpcRequest(payload)) {
        event = payload.method;
      } else if (isJsonRpcResponseSuccess(payload) || isJsonRpcResponseError(payload)) {
        event = "response:".concat(payload.id);
      } else if (isInternalEvent(payload)) {
        event = payload.event;
      } else {
        event = "";
      }

      if (event) {
        eventEmitters = this._eventEmitters.filter(function (eventEmitter) {
          return eventEmitter.event === event;
        });
      }

      if ((!eventEmitters || !eventEmitters.length) && !isReservedEvent(event) && !isInternalEvent(event)) {
        eventEmitters = this._eventEmitters.filter(function (eventEmitter) {
          return eventEmitter.event === "call_request";
        });
      }

      eventEmitters.forEach(function (eventEmitter) {
        if (isJsonRpcResponseError(payload)) {
          var error = new Error(payload.error.message);
          eventEmitter.callback(error, null);
        } else {
          eventEmitter.callback(null, payload);
        }
      });
    }
  }]);

  return EventManager;
}();

export default EventManager;