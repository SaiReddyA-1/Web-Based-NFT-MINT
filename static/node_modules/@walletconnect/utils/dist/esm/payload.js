import _regeneratorRuntime from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/regenerator";
import _asyncToGenerator from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/asyncToGenerator";
export function promisify(originalFn, thisArg) {
  var promisifiedFunction = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var _len,
          callArgs,
          _key,
          _args = arguments;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              for (_len = _args.length, callArgs = new Array(_len), _key = 0; _key < _len; _key++) {
                callArgs[_key] = _args[_key];
              }

              return _context.abrupt("return", new Promise(function (resolve, reject) {
                var callback = function callback(err, data) {
                  if (err === null || typeof err === "undefined") {
                    reject(err);
                  }

                  resolve(data);
                };

                originalFn.apply(thisArg, [].concat(callArgs, [callback]));
              }));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function promisifiedFunction() {
      return _ref.apply(this, arguments);
    };
  }();

  return promisifiedFunction;
}
export function formatRpcError(error) {
  var message = error.message || "Failed or Rejected Request";
  var code = -32000;

  if (error && !error.code) {
    switch (message) {
      case "Parse error":
        code = -32700;
        break;

      case "Invalid request":
        code = -32600;
        break;

      case "Method not found":
        code = -32601;
        break;

      case "Invalid params":
        code = -32602;
        break;

      case "Internal error":
        code = -32603;
        break;

      default:
        code = -32000;
        break;
    }
  }

  var result = {
    code: code,
    message: message
  };
  return result;
}