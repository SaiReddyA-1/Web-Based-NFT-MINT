import _regeneratorRuntime from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/regenerator";
import _asyncToGenerator from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/asyncToGenerator";
import * as env from "@walletconnect/environment";
import { ENCRYPT_OP, DECRYPT_OP, SIGN_OP, VERIFY_OP, AES_BROWSER_ALGO, AES_LENGTH, HMAC_BROWSER_ALGO, HMAC_BROWSER, HMAC_LENGTH, SHA256_BROWSER_ALGO, SHA512_BROWSER_ALGO, LENGTH_512 } from "../constants";
export function getAlgo(type) {
  return type === AES_BROWSER_ALGO ? {
    length: AES_LENGTH,
    name: AES_BROWSER_ALGO
  } : {
    hash: {
      name: HMAC_BROWSER_ALGO
    },
    name: HMAC_BROWSER
  };
}
export function getOps(type) {
  return type === AES_BROWSER_ALGO ? [ENCRYPT_OP, DECRYPT_OP] : [SIGN_OP, VERIFY_OP];
}
export function browserExportKey(_x) {
  return _browserExportKey.apply(this, arguments);
}

function _browserExportKey() {
  _browserExportKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cryptoKey) {
    var type,
        subtle,
        _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            type = _args.length > 1 && _args[1] !== undefined ? _args[1] : AES_BROWSER_ALGO;
            subtle = env.getSubtleCrypto();
            _context.t0 = Uint8Array;
            _context.next = 5;
            return subtle.exportKey("raw", cryptoKey);

          case 5:
            _context.t1 = _context.sent;
            return _context.abrupt("return", new _context.t0(_context.t1));

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _browserExportKey.apply(this, arguments);
}

export function browserImportKey(_x2) {
  return _browserImportKey.apply(this, arguments);
}

function _browserImportKey() {
  _browserImportKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(buffer) {
    var type,
        _args2 = arguments;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            type = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : AES_BROWSER_ALGO;
            return _context2.abrupt("return", env.getSubtleCrypto().importKey("raw", buffer, getAlgo(type), true, getOps(type)));

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _browserImportKey.apply(this, arguments);
}

export function browserAesEncrypt(_x3, _x4, _x5) {
  return _browserAesEncrypt.apply(this, arguments);
}

function _browserAesEncrypt() {
  _browserAesEncrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(iv, key, data) {
    var subtle, cryptoKey, result;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            subtle = env.getSubtleCrypto();
            _context3.next = 3;
            return browserImportKey(key, AES_BROWSER_ALGO);

          case 3:
            cryptoKey = _context3.sent;
            _context3.next = 6;
            return subtle.encrypt({
              iv: iv,
              name: AES_BROWSER_ALGO
            }, cryptoKey, data);

          case 6:
            result = _context3.sent;
            return _context3.abrupt("return", new Uint8Array(result));

          case 8:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _browserAesEncrypt.apply(this, arguments);
}

export function browserAesDecrypt(_x6, _x7, _x8) {
  return _browserAesDecrypt.apply(this, arguments);
}

function _browserAesDecrypt() {
  _browserAesDecrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(iv, key, data) {
    var subtle, cryptoKey, result;
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            subtle = env.getSubtleCrypto();
            _context4.next = 3;
            return browserImportKey(key, AES_BROWSER_ALGO);

          case 3:
            cryptoKey = _context4.sent;
            _context4.next = 6;
            return subtle.decrypt({
              iv: iv,
              name: AES_BROWSER_ALGO
            }, cryptoKey, data);

          case 6:
            result = _context4.sent;
            return _context4.abrupt("return", new Uint8Array(result));

          case 8:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _browserAesDecrypt.apply(this, arguments);
}

export function browserHmacSha256Sign(_x9, _x10) {
  return _browserHmacSha256Sign.apply(this, arguments);
}

function _browserHmacSha256Sign() {
  _browserHmacSha256Sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(key, data) {
    var subtle, cryptoKey, signature;
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            subtle = env.getSubtleCrypto();
            _context5.next = 3;
            return browserImportKey(key, HMAC_BROWSER);

          case 3:
            cryptoKey = _context5.sent;
            _context5.next = 6;
            return subtle.sign({
              length: HMAC_LENGTH,
              name: HMAC_BROWSER
            }, cryptoKey, data);

          case 6:
            signature = _context5.sent;
            return _context5.abrupt("return", new Uint8Array(signature));

          case 8:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _browserHmacSha256Sign.apply(this, arguments);
}

export function browserHmacSha512Sign(_x11, _x12) {
  return _browserHmacSha512Sign.apply(this, arguments);
}

function _browserHmacSha512Sign() {
  _browserHmacSha512Sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(key, data) {
    var subtle, cryptoKey, signature;
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            subtle = env.getSubtleCrypto();
            _context6.next = 3;
            return browserImportKey(key, HMAC_BROWSER);

          case 3:
            cryptoKey = _context6.sent;
            _context6.next = 6;
            return subtle.sign({
              length: LENGTH_512,
              name: HMAC_BROWSER
            }, cryptoKey, data);

          case 6:
            signature = _context6.sent;
            return _context6.abrupt("return", new Uint8Array(signature));

          case 8:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _browserHmacSha512Sign.apply(this, arguments);
}

export function browserSha256(_x13) {
  return _browserSha.apply(this, arguments);
}

function _browserSha() {
  _browserSha = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(data) {
    var subtle, result;
    return _regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            subtle = env.getSubtleCrypto();
            _context7.next = 3;
            return subtle.digest({
              name: SHA256_BROWSER_ALGO
            }, data);

          case 3:
            result = _context7.sent;
            return _context7.abrupt("return", new Uint8Array(result));

          case 5:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _browserSha.apply(this, arguments);
}

export function browserSha512(_x14) {
  return _browserSha2.apply(this, arguments);
}

function _browserSha2() {
  _browserSha2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(data) {
    var subtle, result;
    return _regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            subtle = env.getSubtleCrypto();
            _context8.next = 3;
            return subtle.digest({
              name: SHA512_BROWSER_ALGO
            }, data);

          case 3:
            result = _context8.sent;
            return _context8.abrupt("return", new Uint8Array(result));

          case 5:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  return _browserSha2.apply(this, arguments);
}