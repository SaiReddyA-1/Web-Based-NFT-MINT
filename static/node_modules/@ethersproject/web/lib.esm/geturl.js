"use strict";

import _regeneratorRuntime from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/regenerator";

var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

import { arrayify } from "@ethersproject/bytes";
export function getUrl(href, options) {
  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var request, response, body, headers;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (options == null) {
              options = {};
            }

            request = {
              method: options.method || "GET",
              headers: options.headers || {},
              body: options.body || undefined
            };

            if (options.skipFetchSetup !== true) {
              request.mode = "cors"; // no-cors, cors, *same-origin

              request.cache = "no-cache"; // *default, no-cache, reload, force-cache, only-if-cached

              request.credentials = "same-origin"; // include, *same-origin, omit

              request.redirect = "follow"; // manual, *follow, error

              request.referrer = "client"; // no-referrer, *client
            }

            ;
            _context.next = 6;
            return fetch(href, request);

          case 6:
            response = _context.sent;
            _context.next = 9;
            return response.arrayBuffer();

          case 9:
            body = _context.sent;
            headers = {};

            if (response.headers.forEach) {
              response.headers.forEach(function (value, key) {
                headers[key.toLowerCase()] = value;
              });
            } else {
              response.headers.keys().forEach(function (key) {
                headers[key.toLowerCase()] = response.headers.get(key);
              });
            }

            return _context.abrupt("return", {
              headers: headers,
              statusCode: response.status,
              statusMessage: response.statusText,
              body: arrayify(new Uint8Array(body))
            });

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
}