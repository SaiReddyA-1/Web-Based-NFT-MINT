"use strict";

import _classCallCheck from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";
import _inherits from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { getStatic } from "@ethersproject/properties";
import { Logger } from "@ethersproject/logger";
import { version } from "./_version";
var logger = new Logger(version);
import { UrlJsonRpcProvider } from "./url-json-rpc-provider"; // These are load-balancer-based application IDs

var defaultApplicationIds = {
  homestead: "6004bcd10040261633ade990",
  ropsten: "6004bd4d0040261633ade991",
  rinkeby: "6004bda20040261633ade994",
  goerli: "6004bd860040261633ade992"
};
export var PocketProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {
  _inherits(PocketProvider, _UrlJsonRpcProvider);

  var _super = _createSuper(PocketProvider);

  function PocketProvider(network, apiKey) {
    _classCallCheck(this, PocketProvider);

    // We need a bit of creativity in the constructor because
    // Pocket uses different default API keys based on the network
    if (apiKey == null) {
      var n = getStatic(this instanceof PocketProvider ? this.constructor : void 0, "getNetwork")(network);

      if (n) {
        var applicationId = defaultApplicationIds[n.name];

        if (applicationId) {
          apiKey = {
            applicationId: applicationId,
            loadBalancer: true
          };
        }
      } // If there was any issue above, we don't know this network


      if (apiKey == null) {
        logger.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
          argument: "network",
          value: network
        });
      }
    }

    return _super.call(this, network, apiKey);
  }

  _createClass(PocketProvider, [{
    key: "isCommunityResource",
    value: function isCommunityResource() {
      return this.applicationId === defaultApplicationIds[this.network.name];
    }
  }], [{
    key: "getApiKey",
    value: function getApiKey(apiKey) {
      // Most API Providers allow null to get the default configuration, but
      // Pocket requires the network to decide the default provider, so we
      // rely on hijacking the constructor to add a sensible default for us
      if (apiKey == null) {
        logger.throwArgumentError("PocketProvider.getApiKey does not support null apiKey", "apiKey", apiKey);
      }

      var apiKeyObj = {
        applicationId: null,
        loadBalancer: false,
        applicationSecretKey: null
      }; // Parse applicationId and applicationSecretKey

      if (typeof apiKey === "string") {
        apiKeyObj.applicationId = apiKey;
      } else if (apiKey.applicationSecretKey != null) {
        logger.assertArgument(typeof apiKey.applicationId === "string", "applicationSecretKey requires an applicationId", "applicationId", apiKey.applicationId);
        logger.assertArgument(typeof apiKey.applicationSecretKey === "string", "invalid applicationSecretKey", "applicationSecretKey", "[REDACTED]");
        apiKeyObj.applicationId = apiKey.applicationId;
        apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
        apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
      } else if (apiKey.applicationId) {
        logger.assertArgument(typeof apiKey.applicationId === "string", "apiKey.applicationId must be a string", "apiKey.applicationId", apiKey.applicationId);
        apiKeyObj.applicationId = apiKey.applicationId;
        apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
      } else {
        logger.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", apiKey);
      }

      return apiKeyObj;
    }
  }, {
    key: "getUrl",
    value: function getUrl(network, apiKey) {
      var host = null;

      switch (network ? network.name : "unknown") {
        case "homestead":
          host = "eth-mainnet.gateway.pokt.network";
          break;

        case "ropsten":
          host = "eth-ropsten.gateway.pokt.network";
          break;

        case "rinkeby":
          host = "eth-rinkeby.gateway.pokt.network";
          break;

        case "goerli":
          host = "eth-goerli.gateway.pokt.network";
          break;

        default:
          logger.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
            argument: "network",
            value: network
          });
      }

      var url = null;

      if (apiKey.loadBalancer) {
        url = "https://".concat(host, "/v1/lb/").concat(apiKey.applicationId);
      } else {
        url = "https://".concat(host, "/v1/").concat(apiKey.applicationId);
      }

      var connection = {
        url: url
      }; // Initialize empty headers

      connection.headers = {}; // Apply application secret key

      if (apiKey.applicationSecretKey != null) {
        connection.user = "";
        connection.password = apiKey.applicationSecretKey;
      }

      return connection;
    }
  }]);

  return PocketProvider;
}(UrlJsonRpcProvider);