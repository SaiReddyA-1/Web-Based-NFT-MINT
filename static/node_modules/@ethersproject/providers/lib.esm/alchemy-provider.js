"use strict";

import _classCallCheck from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";
import _assertThisInitialized from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/assertThisInitialized";
import _inherits from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { defineReadOnly } from "@ethersproject/properties";
import { showThrottleMessage } from "./formatter";
import { WebSocketProvider } from "./websocket-provider";
import { Logger } from "@ethersproject/logger";
import { version } from "./_version";
var logger = new Logger(version);
import { UrlJsonRpcProvider } from "./url-json-rpc-provider"; // This key was provided to ethers.js by Alchemy to be used by the
// default provider, but it is recommended that for your own
// production environments, that you acquire your own API key at:
//   https://dashboard.alchemyapi.io

var defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
export var AlchemyWebSocketProvider = /*#__PURE__*/function (_WebSocketProvider) {
  _inherits(AlchemyWebSocketProvider, _WebSocketProvider);

  var _super = _createSuper(AlchemyWebSocketProvider);

  function AlchemyWebSocketProvider(network, apiKey) {
    var _this;

    _classCallCheck(this, AlchemyWebSocketProvider);

    var provider = new AlchemyProvider(network, apiKey);
    var url = provider.connection.url.replace(/^http/i, "ws").replace(".alchemyapi.", ".ws.alchemyapi.");
    _this = _super.call(this, url, provider.network);
    defineReadOnly(_assertThisInitialized(_this), "apiKey", provider.apiKey);
    return _this;
  }

  _createClass(AlchemyWebSocketProvider, [{
    key: "isCommunityResource",
    value: function isCommunityResource() {
      return this.apiKey === defaultApiKey;
    }
  }]);

  return AlchemyWebSocketProvider;
}(WebSocketProvider);
export var AlchemyProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {
  _inherits(AlchemyProvider, _UrlJsonRpcProvider);

  var _super2 = _createSuper(AlchemyProvider);

  function AlchemyProvider() {
    _classCallCheck(this, AlchemyProvider);

    return _super2.apply(this, arguments);
  }

  _createClass(AlchemyProvider, [{
    key: "isCommunityResource",
    value: function isCommunityResource() {
      return this.apiKey === defaultApiKey;
    }
  }], [{
    key: "getWebSocketProvider",
    value: function getWebSocketProvider(network, apiKey) {
      return new AlchemyWebSocketProvider(network, apiKey);
    }
  }, {
    key: "getApiKey",
    value: function getApiKey(apiKey) {
      if (apiKey == null) {
        return defaultApiKey;
      }

      if (apiKey && typeof apiKey !== "string") {
        logger.throwArgumentError("invalid apiKey", "apiKey", apiKey);
      }

      return apiKey;
    }
  }, {
    key: "getUrl",
    value: function getUrl(network, apiKey) {
      var host = null;

      switch (network.name) {
        case "homestead":
          host = "eth-mainnet.alchemyapi.io/v2/";
          break;

        case "ropsten":
          host = "eth-ropsten.alchemyapi.io/v2/";
          break;

        case "rinkeby":
          host = "eth-rinkeby.alchemyapi.io/v2/";
          break;

        case "goerli":
          host = "eth-goerli.alchemyapi.io/v2/";
          break;

        case "kovan":
          host = "eth-kovan.alchemyapi.io/v2/";
          break;

        case "matic":
          host = "polygon-mainnet.g.alchemy.com/v2/";
          break;

        case "maticmum":
          host = "polygon-mumbai.g.alchemy.com/v2/";
          break;

        case "arbitrum":
          host = "arb-mainnet.g.alchemy.com/v2/";
          break;

        case "arbitrum-rinkeby":
          host = "arb-rinkeby.g.alchemy.com/v2/";
          break;

        case "optimism":
          host = "opt-mainnet.g.alchemy.com/v2/";
          break;

        case "optimism-kovan":
          host = "opt-kovan.g.alchemy.com/v2/";
          break;

        default:
          logger.throwArgumentError("unsupported network", "network", arguments[0]);
      }

      return {
        allowGzip: true,
        url: "https:/" + "/" + host + apiKey,
        throttleCallback: function throttleCallback(attempt, url) {
          if (apiKey === defaultApiKey) {
            showThrottleMessage();
          }

          return Promise.resolve(true);
        }
      };
    }
  }]);

  return AlchemyProvider;
}(UrlJsonRpcProvider);