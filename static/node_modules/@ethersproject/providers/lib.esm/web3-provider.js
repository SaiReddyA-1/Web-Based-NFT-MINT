"use strict";

import _classCallCheck from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";
import _assertThisInitialized from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/assertThisInitialized";
import _inherits from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { deepCopy, defineReadOnly } from "@ethersproject/properties";
import { Logger } from "@ethersproject/logger";
import { version } from "./_version";
var logger = new Logger(version);
import { JsonRpcProvider } from "./json-rpc-provider";
var _nextId = 1;

function buildWeb3LegacyFetcher(provider, sendFunc) {
  var fetcher = "Web3LegacyFetcher";
  return function (method, params) {
    var _this = this;

    var request = {
      method: method,
      params: params,
      id: _nextId++,
      jsonrpc: "2.0"
    };
    return new Promise(function (resolve, reject) {
      _this.emit("debug", {
        action: "request",
        fetcher: fetcher,
        request: deepCopy(request),
        provider: _this
      });

      sendFunc(request, function (error, response) {
        if (error) {
          _this.emit("debug", {
            action: "response",
            fetcher: fetcher,
            error: error,
            request: request,
            provider: _this
          });

          return reject(error);
        }

        _this.emit("debug", {
          action: "response",
          fetcher: fetcher,
          request: request,
          response: response,
          provider: _this
        });

        if (response.error) {
          var _error = new Error(response.error.message);

          _error.code = response.error.code;
          _error.data = response.error.data;
          return reject(_error);
        }

        resolve(response.result);
      });
    });
  };
}

function buildEip1193Fetcher(provider) {
  return function (method, params) {
    var _this2 = this;

    if (params == null) {
      params = [];
    }

    var request = {
      method: method,
      params: params
    };
    this.emit("debug", {
      action: "request",
      fetcher: "Eip1193Fetcher",
      request: deepCopy(request),
      provider: this
    });
    return provider.request(request).then(function (response) {
      _this2.emit("debug", {
        action: "response",
        fetcher: "Eip1193Fetcher",
        request: request,
        response: response,
        provider: _this2
      });

      return response;
    }, function (error) {
      _this2.emit("debug", {
        action: "response",
        fetcher: "Eip1193Fetcher",
        request: request,
        error: error,
        provider: _this2
      });

      throw error;
    });
  };
}

export var Web3Provider = /*#__PURE__*/function (_JsonRpcProvider) {
  _inherits(Web3Provider, _JsonRpcProvider);

  var _super = _createSuper(Web3Provider);

  function Web3Provider(provider, network) {
    var _this3;

    _classCallCheck(this, Web3Provider);

    logger.checkNew(this instanceof Web3Provider ? this.constructor : void 0, Web3Provider);

    if (provider == null) {
      logger.throwArgumentError("missing provider", "provider", provider);
    }

    var path = null;
    var jsonRpcFetchFunc = null;
    var subprovider = null;

    if (typeof provider === "function") {
      path = "unknown:";
      jsonRpcFetchFunc = provider;
    } else {
      path = provider.host || provider.path || "";

      if (!path && provider.isMetaMask) {
        path = "metamask";
      }

      subprovider = provider;

      if (provider.request) {
        if (path === "") {
          path = "eip-1193:";
        }

        jsonRpcFetchFunc = buildEip1193Fetcher(provider);
      } else if (provider.sendAsync) {
        jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
      } else if (provider.send) {
        jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
      } else {
        logger.throwArgumentError("unsupported provider", "provider", provider);
      }

      if (!path) {
        path = "unknown:";
      }
    }

    _this3 = _super.call(this, path, network);
    defineReadOnly(_assertThisInitialized(_this3), "jsonRpcFetchFunc", jsonRpcFetchFunc);
    defineReadOnly(_assertThisInitialized(_this3), "provider", subprovider);
    return _this3;
  }

  _createClass(Web3Provider, [{
    key: "send",
    value: function send(method, params) {
      return this.jsonRpcFetchFunc(method, params);
    }
  }]);

  return Web3Provider;
}(JsonRpcProvider);