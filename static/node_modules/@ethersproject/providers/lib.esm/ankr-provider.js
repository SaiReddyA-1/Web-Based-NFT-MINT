import _classCallCheck from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";
import _inherits from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { showThrottleMessage } from "./formatter";
import { UrlJsonRpcProvider } from "./url-json-rpc-provider";
import { Logger } from "@ethersproject/logger";
import { version } from "./_version";
var logger = new Logger(version);
var defaultApiKey = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";

function getHost(name) {
  switch (name) {
    case "homestead":
      return "rpc.ankr.com/eth/";

    case "matic":
      return "rpc.ankr.com/polygon/";

    case "arbitrum":
      return "rpc.ankr.com/arbitrum/";
  }

  return logger.throwArgumentError("unsupported network", "name", name);
}

export var AnkrProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {
  _inherits(AnkrProvider, _UrlJsonRpcProvider);

  var _super = _createSuper(AnkrProvider);

  function AnkrProvider() {
    _classCallCheck(this, AnkrProvider);

    return _super.apply(this, arguments);
  }

  _createClass(AnkrProvider, [{
    key: "isCommunityResource",
    value: function isCommunityResource() {
      return this.apiKey === defaultApiKey;
    }
  }], [{
    key: "getApiKey",
    value: function getApiKey(apiKey) {
      if (apiKey == null) {
        return defaultApiKey;
      }

      return apiKey;
    }
  }, {
    key: "getUrl",
    value: function getUrl(network, apiKey) {
      if (apiKey == null) {
        apiKey = defaultApiKey;
      }

      var connection = {
        allowGzip: true,
        url: "https:/\/" + getHost(network.name) + apiKey,
        throttleCallback: function throttleCallback(attempt, url) {
          if (apiKey.apiKey === defaultApiKey) {
            showThrottleMessage();
          }

          return Promise.resolve(true);
        }
      };

      if (apiKey.projectSecret != null) {
        connection.user = "";
        connection.password = apiKey.projectSecret;
      }

      return connection;
    }
  }]);

  return AnkrProvider;
}(UrlJsonRpcProvider);