"use strict";

import _assertThisInitialized from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/assertThisInitialized";
import _regeneratorRuntime from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/regenerator";
import _classCallCheck from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";
import _get from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/get";
import _inherits from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

import { defineReadOnly, getStatic } from "@ethersproject/properties";
import { Logger } from "@ethersproject/logger";
import { version } from "./_version";
var logger = new Logger(version);
import { JsonRpcProvider } from "./json-rpc-provider"; // A StaticJsonRpcProvider is useful when you *know* for certain that
// the backend will never change, as it never calls eth_chainId to
// verify its backend. However, if the backend does change, the effects
// are undefined and may include:
// - inconsistent results
// - locking up the UI
// - block skew warnings
// - wrong results
// If the network is not explicit (i.e. auto-detection is expected), the
// node MUST be running and available to respond to requests BEFORE this
// is instantiated.

export var StaticJsonRpcProvider = /*#__PURE__*/function (_JsonRpcProvider) {
  _inherits(StaticJsonRpcProvider, _JsonRpcProvider);

  var _super2 = _createSuper(StaticJsonRpcProvider);

  function StaticJsonRpcProvider() {
    _classCallCheck(this, StaticJsonRpcProvider);

    return _super2.apply(this, arguments);
  }

  _createClass(StaticJsonRpcProvider, [{
    key: "detectNetwork",
    value: function detectNetwork() {
      var _this = this;

      var _super = Object.create(null, {
        detectNetwork: {
          get: function get() {
            return _get(_getPrototypeOf(StaticJsonRpcProvider.prototype), "detectNetwork", _this);
          }
        }
      });

      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var network;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                network = this.network;

                if (!(network == null)) {
                  _context.next = 7;
                  break;
                }

                _context.next = 4;
                return _super.detectNetwork.call(this);

              case 4:
                network = _context.sent;

                if (!network) {
                  logger.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
                } // If still not set, set it


                if (this._network == null) {
                  // A static network does not support "any"
                  defineReadOnly(this, "_network", network);
                  this.emit("network", network, null);
                }

              case 7:
                return _context.abrupt("return", network);

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
    }
  }]);

  return StaticJsonRpcProvider;
}(JsonRpcProvider);
export var UrlJsonRpcProvider = /*#__PURE__*/function (_StaticJsonRpcProvide) {
  _inherits(UrlJsonRpcProvider, _StaticJsonRpcProvide);

  var _super3 = _createSuper(UrlJsonRpcProvider);

  function UrlJsonRpcProvider(network, apiKey) {
    var _this2;

    _classCallCheck(this, UrlJsonRpcProvider);

    logger.checkAbstract(this instanceof UrlJsonRpcProvider ? this.constructor : void 0, UrlJsonRpcProvider); // Normalize the Network and API Key

    network = getStatic(this instanceof UrlJsonRpcProvider ? this.constructor : void 0, "getNetwork")(network);
    apiKey = getStatic(this instanceof UrlJsonRpcProvider ? this.constructor : void 0, "getApiKey")(apiKey);
    var connection = getStatic(this instanceof UrlJsonRpcProvider ? this.constructor : void 0, "getUrl")(network, apiKey);
    _this2 = _super3.call(this, connection, network);

    if (typeof apiKey === "string") {
      defineReadOnly(_assertThisInitialized(_this2), "apiKey", apiKey);
    } else if (apiKey != null) {
      Object.keys(apiKey).forEach(function (key) {
        defineReadOnly(_assertThisInitialized(_this2), key, apiKey[key]);
      });
    }

    return _this2;
  }

  _createClass(UrlJsonRpcProvider, [{
    key: "_startPending",
    value: function _startPending() {
      logger.warn("WARNING: API provider does not support pending filters");
    }
  }, {
    key: "isCommunityResource",
    value: function isCommunityResource() {
      return false;
    }
  }, {
    key: "getSigner",
    value: function getSigner(address) {
      return logger.throwError("API provider does not support signing", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "getSigner"
      });
    }
  }, {
    key: "listAccounts",
    value: function listAccounts() {
      return Promise.resolve([]);
    } // Return a defaultApiKey if null, otherwise validate the API key

  }], [{
    key: "getApiKey",
    value: function getApiKey(apiKey) {
      return apiKey;
    } // Returns the url or connection for the given network and API key. The
    // API key will have been sanitized by the getApiKey first, so any validation
    // or transformations can be done there.

  }, {
    key: "getUrl",
    value: function getUrl(network, apiKey) {
      return logger.throwError("not implemented; sub-classes must override getUrl", Logger.errors.NOT_IMPLEMENTED, {
        operation: "getUrl"
      });
    }
  }]);

  return UrlJsonRpcProvider;
}(StaticJsonRpcProvider);