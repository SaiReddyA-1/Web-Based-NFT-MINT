"use strict";

import _classCallCheck from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";
import _assertThisInitialized from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/assertThisInitialized";
import _inherits from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { defineReadOnly } from "@ethersproject/properties";
import { WebSocketProvider } from "./websocket-provider";
import { showThrottleMessage } from "./formatter";
import { Logger } from "@ethersproject/logger";
import { version } from "./_version";
var logger = new Logger(version);
import { UrlJsonRpcProvider } from "./url-json-rpc-provider";
var defaultProjectId = "84842078b09946638c03157f83405213";
export var InfuraWebSocketProvider = /*#__PURE__*/function (_WebSocketProvider) {
  _inherits(InfuraWebSocketProvider, _WebSocketProvider);

  var _super = _createSuper(InfuraWebSocketProvider);

  function InfuraWebSocketProvider(network, apiKey) {
    var _this;

    _classCallCheck(this, InfuraWebSocketProvider);

    var provider = new InfuraProvider(network, apiKey);
    var connection = provider.connection;

    if (connection.password) {
      logger.throwError("INFURA WebSocket project secrets unsupported", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "InfuraProvider.getWebSocketProvider()"
      });
    }

    var url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
    _this = _super.call(this, url, network);
    defineReadOnly(_assertThisInitialized(_this), "apiKey", provider.projectId);
    defineReadOnly(_assertThisInitialized(_this), "projectId", provider.projectId);
    defineReadOnly(_assertThisInitialized(_this), "projectSecret", provider.projectSecret);
    return _this;
  }

  _createClass(InfuraWebSocketProvider, [{
    key: "isCommunityResource",
    value: function isCommunityResource() {
      return this.projectId === defaultProjectId;
    }
  }]);

  return InfuraWebSocketProvider;
}(WebSocketProvider);
export var InfuraProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {
  _inherits(InfuraProvider, _UrlJsonRpcProvider);

  var _super2 = _createSuper(InfuraProvider);

  function InfuraProvider() {
    _classCallCheck(this, InfuraProvider);

    return _super2.apply(this, arguments);
  }

  _createClass(InfuraProvider, [{
    key: "isCommunityResource",
    value: function isCommunityResource() {
      return this.projectId === defaultProjectId;
    }
  }], [{
    key: "getWebSocketProvider",
    value: function getWebSocketProvider(network, apiKey) {
      return new InfuraWebSocketProvider(network, apiKey);
    }
  }, {
    key: "getApiKey",
    value: function getApiKey(apiKey) {
      var apiKeyObj = {
        apiKey: defaultProjectId,
        projectId: defaultProjectId,
        projectSecret: null
      };

      if (apiKey == null) {
        return apiKeyObj;
      }

      if (typeof apiKey === "string") {
        apiKeyObj.projectId = apiKey;
      } else if (apiKey.projectSecret != null) {
        logger.assertArgument(typeof apiKey.projectId === "string", "projectSecret requires a projectId", "projectId", apiKey.projectId);
        logger.assertArgument(typeof apiKey.projectSecret === "string", "invalid projectSecret", "projectSecret", "[REDACTED]");
        apiKeyObj.projectId = apiKey.projectId;
        apiKeyObj.projectSecret = apiKey.projectSecret;
      } else if (apiKey.projectId) {
        apiKeyObj.projectId = apiKey.projectId;
      }

      apiKeyObj.apiKey = apiKeyObj.projectId;
      return apiKeyObj;
    }
  }, {
    key: "getUrl",
    value: function getUrl(network, apiKey) {
      var host = null;

      switch (network ? network.name : "unknown") {
        case "homestead":
          host = "mainnet.infura.io";
          break;

        case "ropsten":
          host = "ropsten.infura.io";
          break;

        case "rinkeby":
          host = "rinkeby.infura.io";
          break;

        case "kovan":
          host = "kovan.infura.io";
          break;

        case "goerli":
          host = "goerli.infura.io";
          break;

        case "matic":
          host = "polygon-mainnet.infura.io";
          break;

        case "maticmum":
          host = "polygon-mumbai.infura.io";
          break;

        case "optimism":
          host = "optimism-mainnet.infura.io";
          break;

        case "optimism-kovan":
          host = "optimism-kovan.infura.io";
          break;

        case "arbitrum":
          host = "arbitrum-mainnet.infura.io";
          break;

        case "arbitrum-rinkeby":
          host = "arbitrum-rinkeby.infura.io";
          break;

        default:
          logger.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
            argument: "network",
            value: network
          });
      }

      var connection = {
        allowGzip: true,
        url: "https:/" + "/" + host + "/v3/" + apiKey.projectId,
        throttleCallback: function throttleCallback(attempt, url) {
          if (apiKey.projectId === defaultProjectId) {
            showThrottleMessage();
          }

          return Promise.resolve(true);
        }
      };

      if (apiKey.projectSecret != null) {
        connection.user = "";
        connection.password = apiKey.projectSecret;
      }

      return connection;
    }
  }]);

  return InfuraProvider;
}(UrlJsonRpcProvider);