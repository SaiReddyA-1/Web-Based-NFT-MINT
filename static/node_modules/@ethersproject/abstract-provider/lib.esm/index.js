"use strict";

import _regeneratorRuntime from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/regenerator";
import _classCallCheck from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";
import _inherits from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "C:\\Users\\GridComputers\\Downloads\\111\\111\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

import { BigNumber } from "@ethersproject/bignumber";
import { isHexString } from "@ethersproject/bytes";
import { Description, defineReadOnly, resolveProperties } from "@ethersproject/properties";
import { Logger } from "@ethersproject/logger";
import { version } from "./_version";
var logger = new Logger(version);
;
; //export type CallTransactionable = {
//    call(transaction: TransactionRequest): Promise<TransactionResponse>;
//};

export var ForkEvent = /*#__PURE__*/function (_Description) {
  _inherits(ForkEvent, _Description);

  var _super = _createSuper(ForkEvent);

  function ForkEvent() {
    _classCallCheck(this, ForkEvent);

    return _super.apply(this, arguments);
  }

  _createClass(ForkEvent, null, [{
    key: "isForkEvent",
    value: function isForkEvent(value) {
      return !!(value && value._isForkEvent);
    }
  }]);

  return ForkEvent;
}(Description);
export var BlockForkEvent = /*#__PURE__*/function (_ForkEvent) {
  _inherits(BlockForkEvent, _ForkEvent);

  var _super2 = _createSuper(BlockForkEvent);

  function BlockForkEvent(blockHash, expiry) {
    _classCallCheck(this, BlockForkEvent);

    if (!isHexString(blockHash, 32)) {
      logger.throwArgumentError("invalid blockHash", "blockHash", blockHash);
    }

    return _super2.call(this, {
      _isForkEvent: true,
      _isBlockForkEvent: true,
      expiry: expiry || 0,
      blockHash: blockHash
    });
  }

  return _createClass(BlockForkEvent);
}(ForkEvent);
export var TransactionForkEvent = /*#__PURE__*/function (_ForkEvent2) {
  _inherits(TransactionForkEvent, _ForkEvent2);

  var _super3 = _createSuper(TransactionForkEvent);

  function TransactionForkEvent(hash, expiry) {
    _classCallCheck(this, TransactionForkEvent);

    if (!isHexString(hash, 32)) {
      logger.throwArgumentError("invalid transaction hash", "hash", hash);
    }

    return _super3.call(this, {
      _isForkEvent: true,
      _isTransactionForkEvent: true,
      expiry: expiry || 0,
      hash: hash
    });
  }

  return _createClass(TransactionForkEvent);
}(ForkEvent);
export var TransactionOrderForkEvent = /*#__PURE__*/function (_ForkEvent3) {
  _inherits(TransactionOrderForkEvent, _ForkEvent3);

  var _super4 = _createSuper(TransactionOrderForkEvent);

  function TransactionOrderForkEvent(beforeHash, afterHash, expiry) {
    _classCallCheck(this, TransactionOrderForkEvent);

    if (!isHexString(beforeHash, 32)) {
      logger.throwArgumentError("invalid transaction hash", "beforeHash", beforeHash);
    }

    if (!isHexString(afterHash, 32)) {
      logger.throwArgumentError("invalid transaction hash", "afterHash", afterHash);
    }

    return _super4.call(this, {
      _isForkEvent: true,
      _isTransactionOrderForkEvent: true,
      expiry: expiry || 0,
      beforeHash: beforeHash,
      afterHash: afterHash
    });
  }

  return _createClass(TransactionOrderForkEvent);
}(ForkEvent); ///////////////////////////////
// Exported Abstracts

export var Provider = /*#__PURE__*/function () {
  function Provider() {
    _classCallCheck(this, Provider);

    logger.checkAbstract(this instanceof Provider ? this.constructor : void 0, Provider);
    defineReadOnly(this, "_isProvider", true);
  }

  _createClass(Provider, [{
    key: "getFeeData",
    value: function getFeeData() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _yield$resolvePropert, block, gasPrice, maxFeePerGas, maxPriorityFeePerGas;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return resolveProperties({
                  block: this.getBlock("latest"),
                  gasPrice: this.getGasPrice().catch(function (error) {
                    // @TODO: Why is this now failing on Calaveras?
                    //console.log(error);
                    return null;
                  })
                });

              case 2:
                _yield$resolvePropert = _context.sent;
                block = _yield$resolvePropert.block;
                gasPrice = _yield$resolvePropert.gasPrice;
                maxFeePerGas = null, maxPriorityFeePerGas = null;

                if (block && block.baseFeePerGas) {
                  // We may want to compute this more accurately in the future,
                  // using the formula "check if the base fee is correct".
                  // See: https://eips.ethereum.org/EIPS/eip-1559
                  maxPriorityFeePerGas = BigNumber.from("1500000000");
                  maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);
                }

                return _context.abrupt("return", {
                  maxFeePerGas: maxFeePerGas,
                  maxPriorityFeePerGas: maxPriorityFeePerGas,
                  gasPrice: gasPrice
                });

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
    } // Alias for "on"

  }, {
    key: "addListener",
    value: function addListener(eventName, listener) {
      return this.on(eventName, listener);
    } // Alias for "off"

  }, {
    key: "removeListener",
    value: function removeListener(eventName, listener) {
      return this.off(eventName, listener);
    }
  }], [{
    key: "isProvider",
    value: function isProvider(value) {
      return !!(value && value._isProvider);
    }
  }]);

  return Provider;
}();